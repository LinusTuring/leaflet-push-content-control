{"version":3,"file":"leaflet-control-starter.js","sources":["../src/leaflet-control-starter.js"],"sourcesContent":["L.Control.LeafletControlStarter = L.Control.extend({\r\n\r\n    // css-class that will (always) be set on the control container\r\n    baseCssClass: 'leaflet-control-starter',\r\n\r\n    // leaflet map (available after onAdd was called)\r\n    map: undefined,\r\n\r\n    // control container\r\n    container: undefined,\r\n\r\n    options: {\r\n\r\n        // control position (default: bottom-right)\r\n        position: 'bottomright',\r\n\r\n        // css-class that will be set on the control container (optional)\r\n        cssClassName: undefined\r\n    },\r\n\r\n    // control is added to the map\r\n    onAdd: function (map) {\r\n\r\n        // remember map\r\n        this.map = map;\r\n\r\n        // string that will be added as 'class' (-> css-classes) to the result container\r\n        let fullCssClassStringOnContainer = this.baseCssClass;\r\n\r\n        // cssClassName was set within the options\r\n        if(this.options.cssClassName) {\r\n            // add cssClass to full class string\r\n            fullCssClassStringOnContainer += ' '+this.options.cssClassName;\r\n        }\r\n        // create control container and add css-classes\r\n        let container = L.DomUtil.create('div', fullCssClassStringOnContainer);\r\n\r\n        // initialize event handlers\r\n        this.addEventHandlersToMap(map);\r\n\r\n        // clicks on the container wont trigger events on the underlying map\r\n        L.DomEvent.disableClickPropagation(container);\r\n\r\n        // remember control container (=> content needs to be updated)\r\n        this.container = container;\r\n\r\n        this.updateControl();\r\n\r\n        return container;\r\n    },\r\n\r\n    // control is removed from the map\r\n    onRemove: function (map) {\r\n        // remove event handlers\r\n        this.removeEventHandlersFromMap(map);\r\n    },\r\n\r\n    // map finished zooming in / out\r\n    onMapZoomEnd: function () {\r\n\r\n        // update control content\r\n        this.updateControl();\r\n    },\r\n\r\n    // map finished moving\r\n    onMapMoveEnd: function () {\r\n\r\n        // update control content\r\n        this.updateControl();\r\n    },\r\n\r\n    // add event handlers\r\n    addEventHandlersToMap(map) {\r\n        map.on('moveend', this.onMapMoveEnd, this);\r\n        map.on('zoomend', this.onMapZoomEnd, this);\r\n    },\r\n\r\n    // remove event handlers\r\n    removeEventHandlersFromMap(map) {\r\n        map.off('moveend', this.onMapMoveEnd, this);\r\n        map.off('zoomend', this.onMapZoomEnd, this);\r\n    },\r\n\r\n    // update control content\r\n    updateControl() {\r\n        this.container.innerText = this.map.getBounds().getCenter()+'(@Z'+this.map.getZoom()+')';\r\n    }\r\n});\r\n"],"names":["L","Control","LeafletControlStarter","extend","baseCssClass","map","undefined","container","options","position","cssClassName","onAdd","this","fullCssClassStringOnContainer","DomUtil","create","addEventHandlersToMap","DomEvent","disableClickPropagation","updateControl","onRemove","removeEventHandlersFromMap","onMapZoomEnd","onMapMoveEnd","[object Object]","on","off","innerText","getBounds","getCenter","getZoom"],"mappings":"2FAAAA,EAAEC,QAAQC,sBAAwBF,EAAEC,QAAQE,OAAO,CAG/CC,aAAc,0BAGdC,SAAKC,EAGLC,eAAWD,EAEXE,QAAS,CAGLC,SAAU,cAGVC,kBAAcJ,GAIlBK,MAAO,SAAUN,GAGbO,KAAKP,IAAMA,EAGX,IAAIQ,EAAgCD,KAAKR,aAGtCQ,KAAKJ,QAAQE,eAEZG,GAAiC,IAAID,KAAKJ,QAAQE,cAGtD,IAAIH,EAAYP,EAAEc,QAAQC,OAAO,MAAOF,GAaxC,OAVAD,KAAKI,sBAAsBX,GAG3BL,EAAEiB,SAASC,wBAAwBX,GAGnCK,KAAKL,UAAYA,EAEjBK,KAAKO,gBAEEZ,GAIXa,SAAU,SAAUf,GAEhBO,KAAKS,2BAA2BhB,IAIpCiB,aAAc,WAGVV,KAAKO,iBAITI,aAAc,WAGVX,KAAKO,iBAITK,sBAAsBnB,GAClBA,EAAIoB,GAAG,UAAWb,KAAKW,aAAcX,MACrCP,EAAIoB,GAAG,UAAWb,KAAKU,aAAcV,OAIzCY,2BAA2BnB,GACvBA,EAAIqB,IAAI,UAAWd,KAAKW,aAAcX,MACtCP,EAAIqB,IAAI,UAAWd,KAAKU,aAAcV,OAI1CY,gBACIZ,KAAKL,UAAUoB,UAAYf,KAAKP,IAAIuB,YAAYC,YAAY,MAAMjB,KAAKP,IAAIyB,UAAU"}